name: i-treasury Backend API Pipeline

on:
  push:
    branches:
      - feature/cicd
    paths:
      - itreasury/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Print current working directory and contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -l

      - name: Running Unit Tests
        run: |
          cd itreasury
          chmod +x gradlew
          ./gradlew clean compileJava
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Print current working directory and contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -l

      - name: Running Unit Tests
        run: |
          echo "Starting running unit tests..."
          cd itreasury
          chmod +x gradlew
          ./gradlew clean test
  build:
    runs-on: ubuntu-latest
    name: Build backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Print current working directory and contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -l

      - name: Compile project
        run: |
          cd itreasury
          chmod +x gradlew
          ./gradlew clean compileJava

  build-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Extract project version
        id: extract_version
        run: |
          cd itreasury
          chmod +x gradlew
          VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          cd ..

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print current working directory and contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -l

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/itreasury-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/itreasury-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
  

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:

      - name: Create deployment folder
        run: ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }}:ci-cd/docker-compose.yml

      - name: Check if Docker Compose is installed
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} <<EOF
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose is not installed. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi
          EOF

      - name: Set ENV variable and deploy
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} <<EOF
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker compose -f docker-compose.yml pull -q
          docker compose -f docker-compose.yml up -d
          EOF
#  health-check:
#    name: API Health Check
#    runs-on: ubuntu-latest
#    needs: [deploy]
#    steps:
#      - name: Check the docker container health status
#        run: |
#          if ! docker ps -a | grep itreasury-api; then
#            echo "Container is not running"
#            exit 1
#          fi